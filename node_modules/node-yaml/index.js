// Generated by IcedCoffeeScript 108.0.9
(function() {
  'use strict';
  var PARSER_SCHEMA, Promise, dump, fs, iced, normalizeOptions, normalizePath, parse, path, read, readPromise, readSync, write, writePromise, writeSync, yaml, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  path = require('path');

  yaml = require('js-yaml');

  Promise = require('pinkie-promise');

  PARSER_SCHEMA = {
    defaultSafe: yaml.DEFAULT_SAFE_SCHEMA,
    defaultFull: yaml.DEFAULT_FULL_SCHEMA,
    failsafe: yaml.FAILSAFE_SCHEMA,
    json: yaml.JSON_SCHEMA,
    core: yaml.CORE_SCHEMA
  };


  /*
   * Normalize path to YAML file
   * -
   * @param string sPath Path to YAML file
   */

  normalizePath = function(sPath) {
    var YAML_EXT, aFiles, sBasename, sDirname, sFile, __basename, __extname, _i, _len;
    YAML_EXT = ['.yml', '.yaml'];
    sBasename = path.basename(sPath);
    sDirname = path.dirname(sPath);
    aFiles = fs.readdirSync(sDirname);
    for (_i = 0, _len = aFiles.length; _i < _len; _i++) {
      sFile = aFiles[_i];
      __extname = path.extname(sFile);
      __basename = path.basename(sFile, __extname);
      if (sBasename === __basename && __indexOf.call(YAML_EXT, __extname) >= 0) {
        return sDirname + path.sep + sFile;
      }
    }
    return sPath;
  };


  /*
   * Normalize options
   * -
   * @param mixed mOptions
   * -
   * @return object
   */

  normalizeOptions = function(mOptions) {
    if (mOptions == null) {
      return {
        encoding: 'utf8',
        schema: PARSER_SCHEMA.defaultSafe
      };
    }
    mOptions = (function() {
      switch (typeof mOptions) {
        case 'string':
          return {
            encoding: mOptions,
            schema: PARSER_SCHEMA.defaultSafe
          };
        case 'object':
          mOptions.encoding || (mOptions.encoding = 'utf8');
          mOptions.schema || (mOptions.schema = PARSER_SCHEMA.defaultSafe);
          return mOptions;
      }
    })();
    return mOptions;
  };


  /*
   * Parse YAML
   * -
   * @param string sString YAML string to parse
   * @param object|null oOptions options for parser:
   *   - schema: object Schema.
   *     More information here:
   *        https://github.com/nodeca/js-yaml#safeload-string---options-
  #
   * Note: defaultSafe schema used by default
   * because is that recomended loading way.
   * -
   * @return object
   */

  parse = function(sString, oOptions) {
    if (oOptions == null) {
      oOptions = null;
    }
    return yaml.load(sString, oOptions);
  };


  /*
   * Convert JSON into YAML
   * 
   * @param object oJson
   * 
   * @return string
   */

  dump = function(oJson, oOptions) {
    if (oOptions == null) {
      oOptions = null;
    }
    return yaml.dump(oJson, oOptions);
  };


  /*
   * Read and parse YAML file
   * -
   * @param string|integer mPath Path to YAML file
   * @param null|string|object mOptions
   * @param callback
   */

  read = function(mPath, mOptions, cb) {
    var err, mData, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (mOptions == null) {
      mOptions = null;
    }
    if (typeof mOptions === 'function') {
      _ref = [mOptions, null], cb = _ref[0], mOptions = _ref[1];
    }
    mOptions = normalizeOptions(mOptions);
    if (typeof mPath !== 'number') {
      mPath = normalizePath(mPath);
    }
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/octetstream/projects/node-yaml/index.iced"
        });
        fs.readFile(mPath, mOptions.encoding || null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return mData = arguments[1];
            };
          })(),
          lineno: 94
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          cb(err);
          return;
        }
        try {
          mData = parse(mData, mOptions);
        } catch (_error) {
          err = _error;
          cb(err);
          return;
        }
        return cb(null, mData);
      };
    })(this));
  };


  /*
   * Synchronous version of yaml.read
   * -
   * @return JSON
   */

  readSync = function(mPath, mOptions) {
    var mData;
    if (mOptions == null) {
      mOptions = null;
    }
    mOptions = normalizeOptions(mOptions);
    if (typeof mPath !== 'number') {
      mPath = normalizePath(mPath);
    }
    mData = fs.readFileSync(mPath, mOptions.encoding || null);
    mData = parse(mData, mOptions);
    return mData;
  };


  /*
   * Parse and write YAML to file
   * -
   * @param string sPath Path to YAML file
   * @param string|Buffer Data to write
   * @param null|string|options mOptions
   * @param callback
   */

  write = function(mPath, mData, mOptions, cb) {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (mData == null) {
      mData = '';
    }
    if (mOptions == null) {
      mOptions = null;
    }
    if (typeof mOptions === 'function') {
      _ref = [mOptions, null], cb = _ref[0], mOptions = _ref[1];
    }
    mOptions = normalizeOptions(mOptions);
    try {
      mData = dump(mData, mOptions);
    } catch (_error) {
      err = _error;
      cb(err);
      return;
    }
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/octetstream/projects/node-yaml/index.iced"
        });
        fs.writeFile(mPath, mData, mOptions.encoding || null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 138
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err != null) {
          cb(err);
          return;
        }
        return cb(null);
      };
    })(this));
  };


  /*
   * Synchronous version of yaml.write
   * 
   * @return Return undefined when file has been successfully written
   */

  writeSync = function(mPath, mData, mOptions) {
    if (mData == null) {
      mData = '';
    }
    if (mOptions == null) {
      mOptions = null;
    }
    mOptions = normalizeOptions(mOptions);
    mData = dump(mData);
    return fs.writeFileSync(mPath, mData, mOptions.encoding || null);
  };

  readPromise = function(mPath, mOptions) {
    if (mOptions == null) {
      mOptions = null;
    }
    return new Promise(function(_res, _rej) {
      var err, mData, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/octetstream/projects/node-yaml/index.iced"
          });
          read(mPath, mOptions, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return mData = arguments[1];
              };
            })(),
            lineno: 157
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            _rej(err);
            return;
          }
          return _res(mData);
        };
      })(this));
    });
  };

  writePromise = function(mPath, mData, mOptions) {
    if (mData == null) {
      mData = '';
    }
    if (mOptions == null) {
      mOptions = null;
    }
    return new Promise(function(_res, _rej) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/octetstream/projects/node-yaml/index.iced"
          });
          write(mPath, mData, mOptions, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 166
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            _rej(err);
            return;
          }
          return _res(mData);
        };
      })(this));
    });
  };

  module.exports = {
    Type: yaml.Type,
    createSchema: yaml.Schema.create,
    parse: parse,
    dump: dump,
    schema: PARSER_SCHEMA,
    read: read,
    readSync: readSync,
    readPromise: readPromise,
    write: write,
    writeSync: writeSync,
    writePromise: writePromise
  };

}).call(this);
