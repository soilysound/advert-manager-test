/* auto wrapping flexible grids for 2 column uneven layouts */
.grid-flex {
  --basis: 0%;
  --gap: var(--gap-500);
  --wrap: wrap;
  --grow: 1;
  --align: flex-start;
  --justify: flex-start;
  --align-children: stretch;
  display: flex;
  flex-wrap: var(--wrap);
  align-items: var(--align);
  justify-content: var(--justify);
  justify-items: var(--justify);
  gap: var(--gap);
}

.grid-flex>* {
  flex-grow: var(--grow);
  flex-shrink: 1;
  flex-basis: calc(var(--basis));
  display: grid;
  align-items: var(--align-children);
}

.grid-flex>*:only-child {
  flex-basis: var(--basis);
}

/* HACK FOR < IOS/SAFARI 14.5, which doesnt support the gap property in flexbox */
@supports not ((display: full-size-kana) or (translate: 10px) or (content-visibility: auto)) {
  .grid-flex>* {
    margin: calc(var(--gap, 1em) / 2);
  }
}

/* even width grid columns that auto wrap */
.grid-auto {
  --basis: auto;
  --gap: var(--gap-400);
  --flow: none;
  --align: stretch;
  --justify: stretch;
  --rows: auto;
  display: grid;
  align-items: var(--align);
  justify-items: var(--justify);
  gap: var(--gap);
  grid-template-columns: repeat(auto-fit, minmax(var(--basis), 1fr));
  grid-template-rows: auto;
  grid-auto-flow: var(--flow);
  height: 100%;
}

.grid-auto>.grid-cell {
  max-width: 100%;
}

.grid-auto>.grid-divider[class] {
  grid-column: auto;
}

/* complex layouts using grid areas and fixed breakpoints */
/* add ui-grid-areas if you want to enable grid areas option */
.grid-areas {
  --gap: var(--gap-400);
  --cols: repeat(6, 1fr);
  --divider-color: var(--border-color);
  --cell1: cell1;
  --cell2: cell2;
  --cell3: cell3;
  --cell4: cell4;
  --cell5: cell5;
  --cell6: cell6;
  --areas: "cell1 cell2 cell3 cell4 cell5 cell6";
  display: grid;
  grid-template-columns: var(--cols);
  grid-template-rows: auto;
  grid-template-areas: var(--areas);
  gap: var(--gap);
}

.grid-cell {
  container-type: inline-size;
  position: relative;
}

.grid-cell > *:first-child {
  position: var(--cell-child-position);
}

.grid-divider {
  background: var(--divider-color);
  min-height: 1px;
  width: 100%;
}

.grid-areas>.grid-cell:nth-of-type(1) {
  grid-area: var(--cell1);
}

.grid-areas>.grid-cell:nth-of-type(2) {
  grid-area: var(--cell2);
}

.grid-areas>.grid-cell:nth-of-type(3) {
  grid-area: var(--cell3);
}

.grid-areas>.grid-cell:nth-of-type(4) {
  grid-area: var(--cell4);
}

.grid-areas>.grid-cell:nth-of-type(5) {
  grid-area: var(--cell5);
}

.grid-areas>.grid-cell:nth-of-type(6) {
  grid-area: var(--cell6);
}

@media all and (max-width: 996px) {
  .grid-areas {
    grid-template-columns: var(--cols-l, var(--cols));
    grid-template-areas: var(--areas-l, var(--areas));
  }

  .grid-cell > *:first-child {
    position: var(--cell-child-position-l, var(--cell-child-position));
  }
}

@media all and (max-width: 767px) {
  .grid-areas {
    grid-template-columns: var(--cols-m, var(--cols-l, var(--cols)));
    grid-template-areas: var(--areas-m, var(--areas-l, var(--areas)));
  }

  .grid-cell > *:first-child {
    position: var(--cell-child-position-m, var(--cell-child-position-l, var(--cell-child-position)));
  }
}

@media all and (max-width: 480px) {
  .grid-areas {
    grid-template-columns: var(--cols-s, var(--cols-m, var(--cols-l, var(--cols))));
    grid-template-areas: var(--areas-s, var(--areas-m, var(--areas-l, var(--areas))));
  }

  .grid-cell > *:first-child {
    position: var(--cell-child-position-s, var(--cell-child-position-m, var(--cell-child-position-l, var(--cell-child-position))));
  }
}

@media all and (max-width: 360px) {
  .grid-areas {
    grid-template-columns: var(--cols-xs, var(--cols-s, var(--cols-m, var(--cols-l, var(--cols)))));
    grid-template-areas: var(--areas-xs, var(--areas-s, var(--areas-m, var(--areas-l, var(--areas)))));
  }
}

/* Adds pink cols and border for debugging grid layouts */
.debug>*:not(.grid-divider) {
  background: var(--debug);
  border: 1px solid rgb(241, 152, 167);
  text-align: center;
  min-width: 50px;
  padding: 0.5em 1px;
}