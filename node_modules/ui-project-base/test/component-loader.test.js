/* global require, document, global */
const componentLoader = require('../js/modules/components/component-loader.js');

describe('Lazy images', () => {
  const component = sinon.spy();
  let div;
  const func = function(options, callback) {
    component();
  };

  func.defined = sinon.stub();
  func.s = {
    contexts: {
      _: {
        config: {
          paths: {
            mycomponent: true,
            foo: () => {}
          }
        },
        defined: {
          foo: sinon.stub()
        }
      }
    }
  };

  global.window.requirejs = func;

  beforeEach(() => {
    div = document.createElement('div');
    document.body.appendChild(div);
  });

  afterEach(() => {
    document.body.removeChild(div);
    div = null;
  });

  it('is an object', () => {
    expect(typeof componentLoader).to.equal('object');
  });

  describe('Init', () => {
    it('is a function', () => {
      expect(typeof componentLoader.init).to.equal('function');
    });

    it('calls addAnimationStartListener and initCss', () => {
      const spy1 = sinon.spy(componentLoader, 'addAnimationStartListener');
      const spy2 = sinon.spy(componentLoader, 'initCss');
      componentLoader.init();
      expect(spy1.called).to.equal(true);
      expect(spy2.called).to.equal(true);
    });

    it('uses the given css selector', () => {
      const ob = componentLoader;
      ob.init('my-class');
      expect(ob.cssSelector).to.equal('my-class');
    });
  });

  describe('ParseType', () => {
    it('turns a string number into a number', () => {
      expect(componentLoader.parseType('10')).to.equal(10);
    });
  });

  describe('ToCamelCase', () => {
    it('converts dashed value to camel case', () => {
      expect(componentLoader.toCamelCase('my-value-is-dashed')).to.equal('myValueIsDashed');
    });
  });

  describe('InitCss', () => {
    it('adds a style tag to the head', () => {
      componentLoader.initCss();
      expect(!!document.querySelector('style')).to.equal(true);
    });
  });

  describe('CallFunction', () => {
    it('is a function', () => {
      expect(typeof componentLoader.callFunction).to.equal('function');
    });

    it('calls the component if defined', () => {
      const element = document.createElement('div');
      const options = { componentName: 'foo' };


      func.defined.returns(true);
      componentLoader.callFunction(element, options);

      expect(func.s.contexts._.defined.foo).to.have.been.calledWith(
        element, options
      );
    });

    it('calls require if component not defined', () => {
      const element = document.createElement('div');
      const options = { componentName: 'foo' };
      const foobar = sinon.spy(global.window, 'requirejs');

      func.defined.returns(false);
      componentLoader.callFunction(element, options);

      expect(foobar).to.have.been.calledWith(['foo'], sinon.match.func);
      expect(component).to.have.been.called;
    });
  });

  describe('callComponent', () => {
    const stub = sinon.stub();
    const element = document.createElement('div');
    const options = {};

    it('calls stub function', () => {
      componentLoader.callComponent(stub, element, options);
      expect(stub.calledWith(element, options)).to.equal(true);
    });
  });

  describe('ProcessElement', () => {
    const element = document.createElement('div');
    element.setAttribute('data-yes', 'yes');

    it('calls callFunction', () => {
      const spy = sinon.spy();
      sinon.stub(componentLoader, 'callFunction', spy);
      componentLoader.processElement(element);
      expect(spy.calledWith(element, { yes: 'yes' })).to.equal(true);
    });
  });

  describe('AddAnimationStartListener', () => {
    const spy = sinon.spy(componentLoader, 'processElement');
    const anim = document.createElement('anim');
    it('calls processElement', () => {
      componentLoader.cssSelector = 'anim';
      componentLoader.initCss();
      componentLoader.addAnimationStartListener();
      document.body.appendChild(anim);
      expect(spy.called).to.equal(true);
    });
  });
});
