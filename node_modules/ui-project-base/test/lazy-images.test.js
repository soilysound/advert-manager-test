let lazyImages = require('../head-js/lazy-images.js');
lazyImages = window.sdc.lazyImages;

NodeList.prototype.forEach = Array.prototype.forEach;

describe('Lazy images', () => {
  let clock;
  let div;

  global.window.navigator.serviceWorker = {
    register: function(url){
      return {
        then: function(func){
          if(func){
            func.call()
          }
          return {
            catch: function(){}
          }
        }
      }
    }
  };

  beforeEach(() => {
    clock = sinon.useFakeTimers();
    div = document.createElement('div');
    document.body.appendChild(div);
  });

  afterEach(() => {
    clock.restore();
    document.body.removeChild(div);
    div = null;
  });

  it('is an object', () => {
    expect(typeof lazyImages).to.equal('object')
  });

  describe('Init', () => {
    it('is a function', () => {
      expect(typeof lazyImages.init).to.equal('function');
    });

    it('should do nothing if no service worker', () => {
        global.window.navigator.serviceWorker = null;
        const spy = sinon.spy(lazyImages, 'scan');
        lazyImages.init();
        clock.tick(300);
        expect(spy.called).to.equal(false);
    });

  });

  describe('AddQueryString', () => {

    it('returns the correct url on a plain image', () => {
      expect(lazyImages.addQueryString('/made-up-url/image.png', 'bypass-service-worker')).to.equal('/made-up-url/image.png?bypass-service-worker');
    });

    it('returns the correct url on an image with a querystring', () => {
      expect(lazyImages.addQueryString('/made-up-url/image.png?v=1', 'bypass-service-worker')).to.equal('/made-up-url/image.png?bypass-service-worker&v=1');
    });

    it('returns the correct url on an image with a querystring and a jpg as a parameter', () => {
        expect(lazyImages.addQueryString('criteo.net/img?c=3&u=https://f.jpg&ups=1', 'bypass-service-worker'))
            .to.equal('criteo.net/img?bypass-service-worker&c=3&u=https://f.jpg&ups=1');
    });
  });

  describe("IsInViewPort", () => {

    it('returns true if in viewport', () => {
      const image = new Image();
      image.src = "about:blank";
      image.style.cssText = "display: block;width: 100px;height: 100px; bordeR: 10px solid red";
      div.appendChild(image);
      expect(lazyImages.isInViewPort(image)).to.equal(true);
    });

    it('returns false if not in viewport', () => {
      const image = new Image();
      image.src = "about:blank";
      image.style.cssText = "position: absolute; top: -300px;display: block;width: 100px;height: 100px; bordeR: 10px solid red";
      div.appendChild(image);
      expect(lazyImages.isInViewPort(image)).to.equal(false);
    });

  });

  describe("scan", () => {

    it('adds the data-lazy-loaded attribute to images', () => {
      const images = "<img src='/path/img.png' width=100 height=100><img src='/path/img.jpg' width=100 height=100>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document.querySelectorAll('img')[0].getAttribute('data-lazy-loaded')).to.equal('true');
      expect(document.querySelectorAll('img')[1].getAttribute('data-lazy-loaded')).to.equal('true');
    });

    it('adds the correct querystring to the images', () => {
      const images = "<img src='/path/img.png' width=100 height=100><img src='/path/img.jpg' width=100 height=100>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document.querySelectorAll('img')[0].getAttribute('src')).to.contain('/path/img.png?bypass-service-worker');
      expect(document.querySelectorAll('img')[1].getAttribute('src')).to.contain('/path/img.jpg?bypass-service-worker');
    });

    it('adds the correct querystring to the sources in a picture tag', () => {
      const images = "<picture><source srcset='/path/picture.png'><source src='/path/picture2.png'><img srcset='/path/img.png' width=100 height=100></picture>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document.querySelectorAll('source')[0].getAttribute('srcset')).to.contain('/path/picture.png?bypass-service-worker');
    });

    it('adds the correct querystring to the data-sources in a picture tag', () => {
      const images = "<picture><source data-srcset='/path/picture.png'><source src='/path/picture2.png'><img data-srcset='/path/img.png' width=100 height=100></picture>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document
          .querySelectorAll('source')[0]
          .getAttribute(
            'data-srcset'
          )).to.contain('/path/picture.png?bypass-service-worker');
    });

    it('adds the correct querystring if src is an inline style', () => {
      const images = "<div class='css-bg' style='background:url(background.png);width: 100px; height: 100px'></div>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document.querySelector('.css-bg').getAttribute('style')).to.contain('background.png?bypass-service-worker');
    });

    it('ignore gifs', () => {
      const images = "<img src='/path/img.gif' width=100 height=100><img src='/path/img.jpg' width=100 height=100>";
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
      expect(document.querySelectorAll('img')[0].getAttribute('src')).to.not.contain('bypass-service-worker');
    });

    it('handles twitter images', () => {
      const images = '<img class="NaturalImage-image" data-srcset="https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FC8U1q01XUAIm4uA.jpg%3Alarge 721w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FC8U1q01XUAIm4uA.jpg 721w,https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FC8U1q01XUAIm4uA.jpg%3Asmall 680w" width="721" height="330" title="Bild auf Twitter anzeigen" alt="Bild auf Twitter anzeigen" src="https://pbs.twimg.com/media/C8U1q01XUAIm4uA.jpg:large">';
      div.insertAdjacentHTML('afterbegin', images);
      lazyImages.scan();
    });
  });

});
