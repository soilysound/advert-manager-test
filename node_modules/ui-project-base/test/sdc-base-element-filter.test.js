const elementFilter = require('../js/modules/components/sdc-base-element-filter.js');

let rootElement;
let linkContainer;
let footballLink;
let anotherFootballLink;
let nbaLink;
let options = {
    elementFilterRules: ''
};

describe('Element Filters', () => {

    beforeEach(() => {
        window.TEST_OBJECT = {
            user: {
                isWholesale: false
            }
        };

        rootElement = document.createElement('body');
        linkContainer = document.createElement('div');
        rootElement.appendChild(linkContainer);

        footballLink = document.createElement('a');
        footballLink.href = '/sky-sports-football';
        linkContainer.appendChild(footballLink);

        anotherFootballLink = document.createElement('a');
        anotherFootballLink.href = '/football-extra-link';
        linkContainer.appendChild(anotherFootballLink);

        nbaLink = document.createElement('a');
        nbaLink.href = '/sky-sports-nba';
        linkContainer.appendChild(nbaLink);
    });

    afterEach(() => {
        window.TEST_OBJECT = undefined;
        options.elementFilterRules = '';
    });

    it('is an object', () => {
        expect(typeof elementFilter).to.equal('object')
    });

    it('test it does nothing if rules are missing', () => {
        elementFilter.init(rootElement);
        expect(footballLink.style.display).be.empty;
        expect(nbaLink.style.display).be.empty;
        expect(anotherFootballLink.style.display).be.empty;
    });

    it('test it does nothing if rules are invalid', () => {
        options.elementFilterRules = '[{"test":"test"}]';
        elementFilter.init(rootElement, options);
        expect(footballLink.style.display).be.empty;
        expect(nbaLink.style.display).be.empty;
        expect(anotherFootballLink.style.display).be.empty;
    });

    it('test it does nothing if object property value does not match', () => {
        options.elementFilterRules = JSON.stringify([{
            selector: "[href*='sky-sports-football']",
            objectProperty: 'window.TEST_OBJECT.user.isWholesale',
            objectPropertyValue: true
        }]);

        elementFilter.init(rootElement, options);
        expect(footballLink.style.display).be.empty;
        expect(nbaLink.style.display).be.empty;
        expect(anotherFootballLink.style.display).be.empty;
    });

    it('test it filters elements', () => {
        options.elementFilterRules = JSON.stringify([{
            selector: "[href*='football']",
            objectProperty: 'window.TEST_OBJECT.user.isWholesale',
            objectPropertyValue: true
        }]);

        window.TEST_OBJECT.user.isWholesale = true;

        elementFilter.init(rootElement, options);
        expect(footballLink.style.display).to.equal('none');
        expect(nbaLink.style.display).be.empty;
        expect(anotherFootballLink.style.display).to.equal('none');
    });


    it('test it filters elements for with multiple rules', () => {
        options.elementFilterRules = JSON.stringify([{
            selector: "[href*='sky-sports-football']",
            objectProperty: 'window.TEST_OBJECT.user.isWholesale',
            objectPropertyValue: true
        }, {
            selector: "[href*='sky-sports-nba']",
            objectProperty: 'window.TEST_OBJECT.user.isWholesale',
            objectPropertyValue: true
        }]);

        window.TEST_OBJECT.user.isWholesale = true;

        elementFilter.init(rootElement, options);
        expect(footballLink.style.display).to.equal('none');
        expect(nbaLink.style.display).to.equal('none');
        expect(anotherFootballLink.style.display).be.empty;
    });

    it('test it filters parent element if specified in the rule', () => {
        options.elementFilterRules = JSON.stringify([{
            selector: "[href*='sky-sports-football']",
            objectProperty: 'window.TEST_OBJECT.user.isWholesale',
            objectPropertyValue: true,
            hideParent: true
        }]);

        window.TEST_OBJECT.user.isWholesale = true;

        elementFilter.init(rootElement, options);
        expect(linkContainer.style.display).to.equal('none');
        expect(footballLink.style.display).be.empty;
        expect(nbaLink.style.display).be.empty;
        expect(anotherFootballLink.style.display).be.empty;
    });

})
