const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');

/**
 * Generates a webpack config for a component
 *
 * @param {String} component Path to the file e.g. /src/scripts/component-name.js
 * @param {String} outputPath Path to output directory e.g. /web/scripts
 * @param {String} componentName Module-friendly name e.g. component_name
 * @param {String} componentId Component ID e.g. component-name
 * @param {Boolean} minify Whether the file should be minified or not
 * @return {Object} The webpack configuration
 */
module.exports = function(component, outputPath, componentName, componentId, minify) {
  const devtool = minify ? 'source-map' : false;
  const plugins = minify ? [
    new TerserPlugin({
      terserOptions: {
        compress: {
          warnings: false,
        },
        output: {
          comments: false,
          semicolons: true,
        },
      },
    }),
  ] : [];

  const config = {
    mode: minify ? 'production' : 'development',
    target: ['web', 'browserslist:> 0.5%, not dead'],
    entry: component,
    output: {
      path: outputPath,
      publicPath: '/js/modules/components/',
      filename: componentName + '.js',
      library: componentName,
      libraryTarget: 'umd',
    },
    module: {
      rules: [
        {
          test: /\.js?$/,
          loader: 'babel-loader',
          options: {
            presets: [
              ['@babel/preset-env']
            ],
          },
          resolve: {
            fullySpecified: false,
          }
        },
      ],
    },
    devtool: devtool,
    plugins: plugins,
  };

  return config;
};
