// BUILD CSS
// ===============

// get dependencies
var fse = require('fs-extra');
var path = require('path');
var sass = require('sass');
var postcss = require('postcss');
var autoprefixer = require('autoprefixer');
var cssnano = require('cssnano');
var globImporter = require('node-sass-magic-importer');
var postcssPresetEnv = require('postcss-preset-env');
var inset = require('postcss-inset');

// path consts
var ROOT = path.resolve(process.cwd());
var CSS_FOLDER = path.join(ROOT, 'web/css/');
var AMP_OUTPUT_PATH = ROOT + '/app/Resources/views/amp/styles.hbs';

var CSS_MIN_FOLDER = path.join(ROOT, 'web/css/min/');
fse.ensureDir(CSS_MIN_FOLDER, function (error) {
    if (error) throw error;
});

// clean folder of any already compiled files
fse.removeSync(CSS_MIN_FOLDER + '*.{css,map}');

// process each css file
fse.readdirSync(CSS_FOLDER).forEach(function(cssPath){
  processCss(cssPath);
});

function processCss(cssPath){

  if(!cssPath.match(/\.scss/)){
    return;
  }

  sass.render({
    importer: globImporter({
      extensions: ['.scss'],
      includePaths: [process.cwd()]
    }),
    file: CSS_FOLDER + cssPath,
    outFile: CSS_MIN_FOLDER + cssPath,
    includePaths: ['node_modules'],
    charset: false,
    sourceMap: true,
    sourceMapEmbed: true,
    sourceMapContents: true
  },

  function (error, result) {

    if (error) {
      console.error('⚠️  CSS Processing Error', error);
    }

    // apply postcss transforms and minify
    postcss([
      autoprefixer({
        overrideBrowserslist: ['last 2 versions', 'iOS >= 12', 'not dead'],
        remove: false
      }),
      inset(),
      postcssPresetEnv({
        stage: false,
        features: {
          'nesting-rules': true,
          'is-pseudo-class': true,
          'clamp': true,
          'custom-media-queries': true
        }
      }),
      cssnano({
        zindex: false,
        reduceIdents: {
          keyframes: false,
          gridTemplate: false
        },
        discardUnused: {
          keyframes: false
        },
        normalizeUrl: {
          stripWWW: false
        }
      })
    ]).process(result.css, {
      from: CSS_FOLDER + cssPath,
      to: CSS_MIN_FOLDER + cssPath.replace(/\.scss/i, '.css'),
      prev: true,
      map: {
        inline: false
      }
    }).then(function(result){

      // write file
      fse.writeFile(CSS_MIN_FOLDER + cssPath.replace(/\.scss/i, '.css'), result.css, 'utf-8',(err) => {
        if (err) throw err;
        console.log('CSS for ' + cssPath + ' installed ok. ');
      });

      if (cssPath == 'site-amp.scss') {
        fse.writeFile(AMP_OUTPUT_PATH, '<style amp-custom>' + result.css + '</style>', function(error) {
          if (error) {
            throw error;
          }
          console.info("  😎  AMP CSS bundled OK");
        });
      }

      // write map
      if(result.map) {
        fse.writeFile(CSS_MIN_FOLDER + cssPath.replace(/\.scss/i, '.css.map'), result.map.toString(), 'utf-8',(err) => {
          if (err) throw err;
          console.log('MAP for ' + cssPath + ' installed ok. ');
        });
      }

    });

  })
};
