// get dependencies
var fse = require('fs-extra');
var path = require('path');
var clc = require('cli-color');
var fileExists = require('file-exists');
var webpack = require('webpack');
var webpackConfig = require('./webpack-config');

function getDirectories(srcpath) {
  return fse.readdirSync(srcpath).filter(function(file) {
    return fse.statSync(path.join(srcpath, file)).isDirectory();
  });
}

// path consts
var ROOT = path.resolve(process.cwd());
var MODULES_FOLDER = path.join(ROOT, '/node_modules');

var OUTPUT_PATH = ROOT + '/web/js/modules/components';
fse.ensureDir(OUTPUT_PATH, function (error) {
    if (error) throw error;
});
var COMPONENTS = getDirectories(MODULES_FOLDER);

// copy the component css to the examples folder (only try repos beginning with ui, sdc or blackjack)
COMPONENTS.filter(item => item.match(/^ui-|sdc-|blackjack-/)).forEach(function(COMPONENTID, i){

  // get the component file
  COMPONENT = path.join(MODULES_FOLDER, COMPONENTID.replace(/^#{|}/g, ''), '/src/components/'+COMPONENTID+'.js');
  if(!fse.existsSync(COMPONENT)){
    return;
  }

  var COMPONENT_NAME = COMPONENTID;

  // we don't ask webpack to minify here, the project should minify
  // using build-requirejs after this script has run
  var minify = false;

  // @todo: make some of this configurable from cli
  var config = webpackConfig(COMPONENT, OUTPUT_PATH, COMPONENT_NAME, COMPONENTID, minify);

  // Compile es6 modules
  webpack(config).run(function(error, stats) {
      if (error) throw error;
      var jsonStats = stats.toJson();
      if (jsonStats.errors.length > 0) console.error(jsonStats.errors);
      if (jsonStats.warnings.length > 0) console.warn(jsonStats.warnings);
      console.info(clc.green("Blackjack JS for " + COMPONENTID + " installed ok."));
  });

});