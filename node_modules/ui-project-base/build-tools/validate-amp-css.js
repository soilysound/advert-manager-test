var amphtmlValidator = require('amphtml-validator');
var path = require('path');
var fse = require('fs-extra');
var clc = require('cli-color');
var yml2json = require('js-yaml');
var ROOT = path.resolve(process.cwd());
var PACKAGE = require(path.join(ROOT, 'package.json'));

function filterErrors(errors) {
  return errors.filter(function (error) {
    return error.params.includes('style amp-custom');
  });
}

function printErrors(cssErrors) {
  cssErrors.forEach(function(error) {
    console.info(' - line ' + error.line + ', col ' + error.col + ': ' + error.message);
  });

  throw new Error('AMP CSS Validation');
}

function checkBuildStatus(cssErrors) {
  if(cssErrors.length > 0) {
    console.error(clc.xterm(255).bgXterm(196)('AMP CSS is invalid:'));
    printErrors(cssErrors);
  } else {
    console.info(clc.green('AMP CSS is valid.'));
  }
}

function validate(ampCss) {
  amphtmlValidator.getInstance().then(function (validator) {
    var result = validator.validateString(ampCss);

    if (result.status === 'FAIL') {
      var cssErrors = filterErrors(result.errors);
      checkBuildStatus(cssErrors);
    } else {
      console.info(clc.green('AMP CSS is valid.'));
    }
  }).done();
}

function validateMultipleAmpCssFiles() {
  var fingerprintYmlPath = process.env.npm_package_config_fingerprints_path || '/app/config/fingerprints.yml';
  var fingerprintParamKey = process.env.npm_package_config_fingerprints_param_key || 'sdc.fingerprints';
  var ampCssPathKeys = PACKAGE['config']['fingerprints']['amp-css-path-keys'];

  // get the fingerprints.yml
  if (!fse.existsSync(ROOT + fingerprintYmlPath)) {
    console.error(`ðŸ™€ No fingerprints file found in ${fingerprintYmlPath}.`);
  }

  fse.readFile(ROOT + fingerprintYmlPath, function (err, data) {

    if (err) throw err;

    if (data) {
      var ampCssPaths = [];
      var fingerprintObj = yml2json.safeLoad(data);

      // get the css file paths from fingerprints.yml
      ampCssPathKeys.forEach(function (key) {
        var retrievedPath = fingerprintObj.parameters[fingerprintParamKey][key];
        ampCssPaths.push(`${ROOT}/web${retrievedPath}`);
      });

      // retrieve css and add <style amp-custom> tag
      ampCssPaths.forEach(function (path) {
        if (!fse.existsSync(path)) {
          console.error(`ðŸš« No file found under ${path}.`);
        }

        fse.readFile(path, function (err, data) {

          if (err) throw err;

          if (data) {
            validate('<style amp-custom>' + data.toString() + '</style>');
          } else {
            console.info(`ðŸ˜­ No AMP CSS found in file ${path}.`);
          }
        });

      });
    }
  });

}

function validateOneAmpCssFile() {
  var ampCssPath = `${ROOT}/app/Resources/views/amp/styles.hbs`;

  if (!fse.existsSync(ampCssPath)) {
    console.error(`ðŸš« No file found under ${ampCssPath}`);
  }

  fse.readFile(ampCssPath, function (err, data) {
    if (err) throw err;

    if (data) {
      validate(data.toString());
    } else {
      console.info(`ðŸ˜­ No AMP CSS found in file ${ampCssPath}.`);
    }
  });
}

function readAndValidateAmpCss() {
  if (PACKAGE['config']['fingerprints']['amp-css-path-keys']) {
    return validateMultipleAmpCssFiles();
  }

  return validateOneAmpCssFile();
}

readAndValidateAmpCss();
