const fs = require('fs');
const path = require('path');
const postcss = require('postcss');
const postcssPresetEnv = require('postcss-preset-env');
const inset = require('postcss-inset');
const cssnano = require('cssnano');
const atImport = require("postcss-import");

const ROOT = path.resolve(process.cwd());
const CSS_FOLDER = path.join(ROOT, 'web/css/');
const CSS_MIN_FOLDER = path.join(ROOT, 'web/css/min/');

// clean folder of any already compiled files
// fse.removeSync(CSS_MIN_FOLDER + '*.{css,map}');

// write new files
fs.readdirSync(CSS_FOLDER).forEach(function (cssPath) {

  if (!cssPath.match(/\.css/)) {
    return;
  }

  const file = fs.readFileSync(path.join(CSS_FOLDER, cssPath), 'utf8').toString();

  postcss([
    atImport(),
    inset(),
    postcssPresetEnv({
      stage: false,
      features: {
        'nesting-rules': true,
        'is-pseudo-class': true,
        'clamp': true,
        'custom-media-queries': true
      }
    }),
    cssnano({ preset: 'default' })
  ]).process(file, {
    from: CSS_FOLDER + cssPath,
    to: CSS_MIN_FOLDER + cssPath,
    prev: true,
    map: {
      inline: false
    }
  }).then((result) => {

    // write file
    fs.writeFileSync(CSS_MIN_FOLDER + cssPath, result.css, 'utf-8');
    console.log('CSS for ' + cssPath + ' installed ok. ');

    // write map
    if (result.map) {
      fs.writeFileSync(CSS_MIN_FOLDER + cssPath.replace(/\.css/i, '.css.map'), result.map.toString(), 'utf-8');
      console.log('MAP for ' + cssPath + ' installed ok. ');
    }

  });
});
